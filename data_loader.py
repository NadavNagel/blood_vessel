from data_saver import *import pandas as pdfrom sklearn import linear_modelimport warningswarnings.filterwarnings('ignore')import matplotlib.pyplot as pltimport numpy as npX = Nonetraining_files = ['batch43_obs0_99.pickle', 'batch43_obs100_199.pickle', 'batch43_obs200_399.pickle']test_file = 'batch43_obs200_299.pickle'def get_data_for_model(data, crop_size, center):    X = None    for i in range(len(data)):        x1 = data[i].low_resolution.displacement_mesh.points[center - crop_size:center + crop_size, 0]        x2 = data[i].low_resolution.displacement_mesh.points[center - crop_size:center + crop_size, 1]        x3 = data[i].low_resolution.displacement_mesh.points[center - crop_size:center + crop_size, 2]        x = np.concatenate([x1, x2, x3])        y = data[i].low_resolution.strain_mesh.points[center, 1]        if X is None:            X = x.reshape(crop_size * 2 * 3, 1)            Y = y.reshape(1, 1)        else:            X = np.concatenate([X, x.reshape(2 * crop_size * 3, 1)], axis=1)            Y = np.concatenate([Y, y.reshape(1, 1)], axis=1)    df_X = pd.DataFrame(data=X[0:, 0:], index=[i for i in range(X.shape[0])],                        columns=['f' + str(i) for i in range(X.shape[1])]).T    df_Y = pd.DataFrame(data=Y[0:, 0:], index=[i for i in range(Y.shape[0])],                        columns=['f' + str(i) for i in range(Y.shape[1])]).T    # df = pd.concat([df_X, df_Y], axis=1, ignore_index=True)    return df_X, df_Ytraining_data = []for training_file in training_files:    training_data_temp = read_pickle(training_file)    training_data = training_data_temp + training_datatest_data = read_pickle(test_file)results = {}centers = range(500, 600)  # range(100, 3000, 100)for center in centers:    results[center] = {}    results[center]['crop_size'] = []    results[center]['r_sqr'] = []    for crop_size in (49,50,51): #range(1, 75):        results[center]['crop_size'].append(crop_size)        X_train, Y_train = get_data_for_model(training_data, crop_size, center)        regression_model = linear_model.LinearRegression()        regression_model.fit(X_train, Y_train)        X_test, Y_test = get_data_for_model(test_data, crop_size, center)        r_sqr_test = regression_model.score(X_test, Y_test)        results[center]['r_sqr'].append(r_sqr_test)    plt.plot(results[center]['crop_size'], results[center]['r_sqr'], label=center)plt.legend()plt.show()  # ðŸ˜€